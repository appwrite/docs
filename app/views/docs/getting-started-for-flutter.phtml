<?php
$platforms = $this->getParam('platforms');
$versions = [];

foreach($platforms['client']['languages'] as $lang) {
    $key = $lang['key'] ?? '';
    $version = $lang['version'] ?? '';

    if(!empty($key)) {
        $versions[$key] = $version;
    }
}

$version = (isset($versions['flutter'])) ? $versions['flutter'] : '';
?>
<p>Appwrite is a development platform providing you an easy yet powerful API and management console to get your next project up and running quickly.</p>

<p>This tutorial will help you start using Appwrite products and build your next project. Before starting, make sure you have followed the Appwrite <a href="/docs/installation">installation guide</a>, and you have an Appwrite server instance up and running on your host machine or server.</p>

<h2><a href="/docs/getting-started-for-flutter#createYourProject" id="createYourProject">Create Your First Appwrite Project</a></h2>

<p>Go to your new Appwrite console, and once inside, click the <i class="icon-plus"></i> icon in the top navigation header or on the <b>'Create Project'</b> button on your console homepage. Choose a name for your project and click create to get started.</p>

<h2><a href="/docs/getting-started-for-flutter#addYourPlatform" id="addYourPlatform">Add your Flutter Platform</a></h2>

<p>To init your SDK and start interacting with Appwrite services, you need to add a new Flutter platform to your project. To add a new platform, go to your Appwrite console, choose the project you created in the step before, and click the 'Add Platform' button.</p>

<p>From the options, choose to add a new <b>Flutter</b> platform and add your app credentials. Appwrite Flutter SDK currently supports building apps for Android, iOS, Linux, Mac OS, Web and Windows.</p>

<p>If you are building your Flutter application for multiple devices, you have to follow this process for each different device.</p>

<h3><a href="/docs/getting-started-for-flutter#android" id="android">Android</a></h3>

<p>For <b>Android</b> first add your app <u>name</u> and <u>package name</u>, Your package name is generally the <b>applicationId</b> in your app-level <a href="https://github.com/appwrite/playground-for-flutter/blob/0fdbdff98384fff940ed0b1e08cf14cfe3a2be3e/android/app/build.gradle#L41" target="_blank" rel="noopener">build.gradle</a> file. By registering your new app platform, you are allowing your app to communicate with the Appwrite API.</p>

<p>In order to capture the Appwrite OAuth callback url, the following activity needs to be added inside the `<application>` tag, along side the existing `<activity>` tags in your <a href="https://github.com/appwrite/playground-for-flutter/blob/master/android/app/src/main/AndroidManifest.xml" target="_blank" rel="noopener">AndroidManifest.xml</a>. Be sure to relpace the <b>[PROJECT_ID]</b> string with your actual Appwrite project ID. You can find your Appwrite project ID in you project settings screen in your Appwrite console.</p>

<div class="ide" data-lang="html" data-lang-label="XML">
    <pre class="line-numbers"><code class="prism language-xml" data-prism><?php echo $this->escape('<manifest ...>
  ...
  <application ...>
    ...
    <!-- Add this inside the `<application>` tag, along side the existing `<activity>` tags -->
    <activity android:name="com.linusu.flutter_web_auth.CallbackActivity" >
      <intent-filter android:label="flutter_web_auth">
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="appwrite-callback-[PROJECT_ID]" />
      </intent-filter>
    </activity>
  </application>
</manifest>'); ?>
</code></pre>
</div>

<h3><a href="/docs/getting-started-for-flutter#iOS" id="iOS">iOS</a></h3>

<p>For <b>iOS</b> first add your app <u>name</u> and <u>Bundle ID</u>, You can find your Bundle Identifier in the General tab for your app's primary target in Xcode.</p>

<p>The Appwrite SDK uses ASWebAuthenticationSession on iOS 12+ and SFAuthenticationSession on iOS 11 to allow OAuth authentication. You have to change your iOS Deployment Target in Xcode to be iOS >= 11 to be able to build your app on an emulator or a real device.</p>

<ol class="margin-top margin-bottom-large">
  <li class="margin-bottom-small">In Xcode, open Runner.xcworkspace in your app's ios folder.
  <li class="margin-bottom-small">To view your app's settings, select the Runner project in the Xcode project navigator. Then, in the main view sidebar, select the Runner target.</li>
  <li class="margin-bottom-small">Select the General tab.</li>
  <li class="margin-bottom-small">In Deployment Info, 'Target' select iOS 11.0</li>
</ol>

<h3><a href="/docs/getting-started-for-flutter#linux" id="linux">Linux</a></h3>

<p>For <b?>Linux</b> add your app <u>name</u> and <u>package name</u>, Your package name is generally the <b>name</b> in your <a href="https://github.com/appwrite/playground-for-flutter/blob/0fdbdff98384fff940ed0b1e08cf14cfe3a2be3e/pubspec.yaml#L1" target="_blank" rel="noopener">pubspec.yaml</a> file. If you cannot find the correct package name, run the application in linux, and make any request with proper exception handling, you should get the application id needed to add in the received error message.</p>

<h3><a href="/docs/getting-started-for-flutter#macOS" id="macOS">Mac OS</a></h3>

<p>For <b>Mac OS</b> add your app name and Bundle ID, You can find your Bundle Identifier in the General tab for your app's primary target in Xcode.</p>

<h3><a href="/docs/getting-started-for-flutter#web" id="web">Web</a></h3>

<p>Appwrite 0.7, and the Appwrite Flutter SDK 0.3.0 have added support for Flutter Web. To build web apps that integrate with Appwrite successfully, all you have to do is add a web platform on your Appwrite project's dashboard and list the domain your website will use to allow communication to the Appwrite API.</p>

<div class="notice">
  <h2>Flutter Web Cross-Domain Communication & Cookies</h2>
  <p>While running Flutter Web, make sure your Appwrite server and your Flutter client are using the same top-level domain and the same protocol (HTTP or HTTPS) to communicate. When trying to communicate between different domains or protocols, you may receive HTTP status error 401 because some modern browsers block cross-site or insecure cookies for enhanced privacy. In production, Appwrite allows you set multiple <a href="/docs/custom-domains">custom-domains</a> for each project.</p>
</div>


<h3><a href="/docs/getting-started-for-flutter#windows" id="windows">Windows</a></h3>

<p>For <b>Windows</b> add your app <u>name</u> and <u>package name</u>, Your package name is generally the <b>name</b> in your <a href="https://github.com/appwrite/playground-for-flutter/blob/0fdbdff98384fff940ed0b1e08cf14cfe3a2be3e/pubspec.yaml#L1" target="_blank" rel="noopener">pubspec.yaml</a> file. If you cannot find the correct package name, run the application in windows, and make any request with proper exception handling, you should get the application id needed to add in the received error message.</p>


<h2><a href="/docs/getting-started-for-flutter#getSDK" id="getSDK">Get Appwrite Flutter SDK</a></h2>

<p>Add <a href="https://pub.dev/packages/appwrite" target="_blank" rel="noopener">Appwrite SDK</a> to your package's pubspec.yaml file <a href="https://github.com/appwrite/playground-for-flutter/blob/master/pubspec.yaml" target="_blank" rel="noopener">(view example)</a>:</p>

<div class="ide margin-bottom" data-lang="yaml" data-lang-label="yaml">
    <pre class="line-numbers"><code class="prism language-yaml" data-prism>dependencies:
  appwrite: ^<?php echo $this->escape($version); ?>
</code></pre>
</div>

<p>You can also install the SDK using the <a href="https://pub.dev/" target="_blank" rel="noopener">Dart package manager</a> from your terminal:</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
  <pre class="line-numbers"><code class="prism language-bash" data-prism>pub get appwrite</code></pre>
</div>

<h2><a href="/docs/getting-started-for-flutter#initSDK" id="initSDK">Init your SDK</a></h2>

<p>Initialize your SDK code with your project ID, which can be found in your project settings page.</p>

<div class="ide" data-lang="dart" data-lang-label="Flutter SDK">
  <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'package:appwrite/appwrite.dart';

Client client = Client();

client
    .setEndpoint('https://localhost/v1') // Your Appwrite Endpoint
    .setProject('5e8cf4f46b5e8') // Your project ID
    .setSelfSigned(status: true) // For self signed certificates, only use for development
;
</code></pre>
</div>

<p>Before starting to send any API calls to your new Appwrite instance, make sure your Android or iOS emulators has network access to the Appwrite server hostname or IP address.</p>

<p>When trying to connect to Appwrite from an emulator or a mobile device, localhost is the hostname for the device or emulator and not your local Appwrite instance. You should replace localhost with your private IP as the Appwrite endpoint's hostname. You can also use a service like <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a> to proxy the Appwrite API.</p>

<h2><a href="/docs/getting-started-for-flutter#makeRequest" id="makeRequest">Make Your First Request</a></h2>

<p>Once your SDK object is set, access any of the Appwrite services and choose any request to send. Full documentation for any service method you would like to use can be found in your SDK documentation or in the API References section.</p>

<div class="ide" data-lang="dart" data-lang-label="Flutter SDK">
  <pre class="line-numbers"><code class="prism language-dart" data-prism>// Register User
Account account = Account(client);

Response user = await account
    .create(
        email: 'me@appwrite.io',
        password: 'password',
        name: 'My Name'
    );
</code></pre>
</div>

<h2><a href="/docs/getting-started-for-flutter#listenToChanges" id="listenToChanges">Listen to changes</a></h2>

<p>If you want to listen to changes in realtime from Appwrite, you can subscribe to a variety of channels and receive updates within milliseconds. Full documentation for Realtime can be found <a href="/docs/realtime">here</a>.</p>

<div class="ide" data-lang="dart" data-lang-label="Flutter SDK">
  <pre class="line-numbers"><code class="prism language-dart" data-prism>// Subscribe to files channel
final realtime = Realtime(client);
final subscription = realtime.subscribe(['files']);

subscription.stream.listen((response) {
    if(response.event === 'storage.files.create') {
        // Log when a new file is uploaded
        print(response.payload);
    }
})
</code></pre>
</div>

<h2><a href="/docs/getting-started-for-flutter#fullExample" id="fullExample">Full Example</a></h2>
<div class="ide" data-lang="dart" data-lang-label="Flutter SDK">
  <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'package:appwrite/appwrite.dart';

Client client = Client();

client
    .setEndpoint('https://localhost/v1') // Your Appwrite Endpoint
    .setProject('5e8cf4f46b5e8') // Your project ID
    .setSelfSigned(status: true) // For self signed certificates, only use for development
;

// Register User
Account account = Account(client);

Response user = await account
    .create(
        email: 'me@appwrite.io',
        password: 'password',
        name: 'My Name'
    );

// Subscribe to files channel
final realtime = Realtime(client);
final subscription = realtime.subscribe(['files']);

subscription.stream.listen((response) {
    if(response.event === 'storage.files.create') {
        // Log when a new file is uploaded
        print(response.payload);
    }
})
</code></pre>
</div>

<h2><a href="/docs/getting-started-for-flutter#nextSteps" id="nextSteps">Next Steps</a></h2>

<p>Appwrite has many services and tools to help improve your app and speed up your development. The best way to learn how you can take advantage of them is to explore the different API references docs.</p>
