<?php
$channels = [
    'account' => 'All account related events (session create, name update...)',
    'collections' =>  'Any create/update/delete events for collections',
    'collections.[ID]' => 'Any update/delete events to a given collection',
    'collections.[ID].documents' => 'Any create/update/delete events to any document in a collection',
    'documents' => 'Any create/update/delete events to any document',
    'documents.[ID]' => 'Any update/delete events to a given document',
    'files' => 'Any create/update/delete events to any file',
    'files.[ID]' => 'Any update/delete events to a given file',
    'teams' => 'Any create/update/delete events to a any team',
    'teams.[ID]' => 'Any update/delete events to a given team',
    'memberships' => 'Any create/update/delete events to a any membership',
    'memberships.[ID]' => 'Any update/delete events to a given membership',
    'executions' => 'Any update to executions',
    'executions.[ID]' => 'Any update to a given execution',
    'functions.[ID]' => 'Any execution event to a given function'
];
?>

<p>Realtime allows you to listen to any events on the server-side in realtime using the <b>subscribe</b> method.</p>
<p>Instead of requesting new data via HTTP, the subscription will receive new data everytime it changes, any connected
    client receives that update within milliseconds via a WebSocket connection.</p>
<p>This lets you build an interactive and responsive user experience by providing information from all of Appwrite's
    services in realtime.</p>
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>const sdk = new Appwrite();

sdk
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
;

sdk.subscribe(channel, callback);</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>final client = Client();

client
    .setEndpoint('https://localhost/v1') // Your Appwrite Endpoint
    .setProject('5e8cf4f46b5e8') // Your project ID
    .setSelfSigned(true) // For self signed certificates, only use for development
;

final realtime = Realtime(client);
final subscription = realtime.subscribe(channel);

subscription.stream.listen(callback);
</code></pre>
        </div>
    </li>
    <li>
        <h3>Android</h3>
        <div class="ide margin-bottom" data-lang="android" data-lang-label="Android SDK">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>val client = Client()

client
    .setEndpoint("https://[HOSTNAME_OR_IP]/v1") // Your API Endpoint
    .setProject("5df5acd0d48c2") // Your project ID
    .setSelfSigned(true) // For self signed certificates, only use for development

val realtime = Realtime(client)

realtime.subscribe(channels, callback)</code></pre>
        </div>
    </li>
</ul>

<p>To subscribe to updates from different resources, you need to specify one or more channels. The <a
        href="/docs/realtime#channels">channels</a> offer a wide and powerful selection that will allow you to listen to
    all possible resources. This allows you to receive updates not only from the database, but from all the services
    that Appwrite offers.</p>

<p>If you listen to all documents from a collection by subscribing to the <span
        class="tag">collections.[ID].documents</span> channel, you can use the <b>event</b> attribute in the callback to
    distinguish whether a new document was created or an existing one was updated.</p>

<p>All possible events can be found <a href="/docs/webhooks#events">here</a>.</p>

<div class="notice margin-top-large margin-bottom-large">
    <h3>Permissions</h3>
    <p>All subscriptions are secured by the <a href="/docs/permissions">permissions</a> offered by Appwrite, meaning a
        user will only receive updates to resources to which he has read permission.</p>
    <p>Using a wildcard <span class="tag">*</span> on read permissions will allow any client to receive updates.</p>
</div>

<h2><a href="/docs/realtime#examples" id="examples">Examples</a></h2>
<p>The examples below will show you how you can use Realtime in various ways.</p>

<h3><a href="/docs/realtime#subscribe-to-a-channel" id="subscribe-to-a-channel">Subscribe to a channel</a></h3>

<p>In this example we are subscribing to all updates related to our account by using the <span
        class="tag">account</span> channel. This will be triggered by any update related to the authenticated user, like
    updating the user's name or e-mail address.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>const sdk = new Appwrite();

sdk.subscribe('account', response => {
    // Callback will be executed on all account events.
    console.log(response);
});</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>final client = Client();
final realtime = Realtime(client);
final subscription = realtime.subscribe(['account']);

subscription.stream.listen((response) {
    // Callback will be executed on all account events.
    print(response);
})</code></pre>
        </div>
    </li>
    <li>
        <h3>Android</h3>
        <div class="ide margin-bottom" data-lang="android" data-lang-label="Android SDK">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>val client = Client()
val realtime = Realtime(client)

realtime.subscribe("account", callback = { param ->
    // Callback will be executed on all account events.
    print(param.toString())
})</code></pre>
        </div>
    </li>
</ul>

<h3><a href="/docs/realtime#subscribe-to-multiple-channels" id="subscribe-to-multiple-channels">Subscribe to multiple
        channels</a></h3>

<p>You can also listen to multiple <a href="/docs/realtime#channels">channels</a> at once by passing an array of
    channels. This will trigger the callback for any events for all channels passed.</p>
<p>In this example we are listening to the document A and all files by subscribing to the <span
        class="tag">documents.A</span> and <span class="tag">files</span> channels.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>const sdk = new Appwrite();

sdk.subscribe(['documents.A', 'files'], response => {
    // Callback will be executed on changes for documents A and all files.
    console.log(response);
});</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>final client = Client();
final realtime = Realtime(client);
final subscription = realtime.subscribe(['documents.A', 'files']);

subscription.stream.listen((response) {
    // Callback will be executed on changes for documents A and all files.
    print(response);
})</code></pre>
        </div>
    </li>
    <li>
        <h3>Android</h3>
        <div class="ide margin-bottom" data-lang="android" data-lang-label="Android SDK">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>val client = Client()
val realtime = Realtime(client)

realtime.subscribe(["documents.A", "files"], callback = { param ->
    // Callback will be executed on changes for documents A and all files.
    print(param.toString())
})</code></pre>
        </div>
    </li>
</ul>

<h3><a href="/docs/realtime#unsubscribe" id="unsubscribe">Unsubscribe</a></h3>

<p>If you no longer want to receive updates from a subscription, you can unsubscribe so that your callbacks are no
    longer called.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>const sdk = new Appwrite();

const unsubscribe = sdk.subscribe('files', response => {
    // Callback will be executed on changes for all files.
    console.log(response);
});

// Closes the subscription.
unsubscribe();</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>final client = Client();
final realtime = Realtime(client);
final subscription = realtime.subscribe(['files']);

subscription.stream.listen((response) {
    // Callback will be executed on changes for all files.
    print(response);
})

// Closes the subscription.
subscription.close();</code></pre>
        </div>
    </li>
    <li>
        <h3>Android</h3>
        <div class="ide margin-bottom" data-lang="android" data-lang-label="Android SDK">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>val client = Client()
val realtime = Realtime(client)

val subscription = realtime.subscribe("files", callback = { param ->
    // Callback will be executed on changes for all files.
    print(param.toString())
})

// Closes the subscription.
subscription.close()</code></pre>
        </div>
    </li>
</ul>

<h2><a href="/docs/realtime#payload" id="payload">Payload</a></h2>

<p>The payload from the subscription will contain following properties:</p>

<table class="vertical full args">
    <thead>
        <tr>
            <td style="width: 140px">Name</td>
            <td style="width: 120px">Type</td>
            <td>Description</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td data-title="Name: ">
                event
            </td>
            <td data-title="Type: ">
                string
            </td>
            <td data-title="Description: ">
                The <a href="/docs/webhooks#events">system event</a> that triggered this update.
            </td>
        </tr>
        <tr>
            <td data-title="Name: ">
                channels
            </td>
            <td data-title="Type: ">
                string[]
            </td>
            <td data-title="Description: ">
                An array of <a href="/docs/realtime#channels">channels</a> that can receive this message.
            </td>
        </tr>
        <tr>
            <td data-title="Name: ">
                timestamp
            </td>
            <td data-title="Type: ">
                integer
            </td>
            <td data-title="Description: ">
                The <a href="https://en.wikipedia.org/wiki/Unix_time" rel="noopener" target="_blank">UNIX timestamp</a>
                from the server to ensure consistency across all client platforms and real-time technologies.
            </td>
        </tr>
        <tr>
            <td data-title="Name: ">
                payload
            </td>
            <td data-title="Type: ">
                object
            </td>
            <td data-title="Description: ">
                Payload contains the data equal to the response model.
            </td>
        </tr>
    </tbody>
</table>

<p>If you subscribe to the <span class="tag">documents</span> channel and a document the user is allowed to read is
    updated, you will receive an object containing informations about the event and the updated document.</p>

<p>The response will look like this:</p>

<div class="ide margin-bottom" data-lang="json" data-lang-label="JSON">
    <pre class="line-numbers"><code class="prism language-json" data-prism>{
    "event": "database.documents.update",
    "channels": [
        "documents",
        "documents.[DOCUMENT_ID]",
        "collections.[COLLECTION_ID].documents"
    ],
    "timestamp": 1629719169,
    "payload": {
        "$id": "[DOCUMENT_ID]",
        "$collection": "[COLLECTION_ID]",
        "$permissions": [],
        "attribute1": "lorem",
        "attribute2": 2030
    }
}</code></pre>
</div>

<h2><a href="/docs/realtime#channels" id="channels">Channels</a></h2>
<p>A list of all channels available you can subscribe to:</p>
<table class="full text-size-small">
    <thead>
        <tr>
            <td style="width: 180px">Channel</td>
            <td>Description</td>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($channels as $channel => $description) : ?>
        <tr>
            <td><?php echo $this->escape($channel); ?></td>
            <td><?php echo $this->escape($description); ?></td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>

<h2><a href="/docs/realtime#custom-endpoint" id="custom-endpoint">Custom Endpoint</a></h2>
<p>The SDK will guess the endpoint of the Realtime API when setting the endpoint of your Appwrite instance. If you are
    running Appwrite with a custom proxy and changed the route of the Realtime API, you can call the
    <b>setEndpointRealtime</b> method on the Client SDK and set your new endpoint value.</p>
<p>By default the endpoint is <b>wss://[ENDPOINT]/v1/realtime</b>.</p>
<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>const sdk = new Appwrite();

sdk.setEndpointRealtime('[ENDPOINT]');</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>final client = Client();
client.setEndpointRealtime('[ENDPOINT]');</code></pre>
        </div>
    </li>
    <li>
        <h3>Android</h3>
        <div class="ide margin-bottom" data-lang="android" data-lang-label="Android SDK">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>val client = Client()
client.setEndpointRealtime('[ENDPOINT]')</code></pre>
        </div>
    </li>
</ul>
<h2><a href="/docs/realtime#known-limitations" id="known-limitations">Known limitations</a></h2>

<h3>Authentication with existing subscription</h3>
<p>If you authenticate a user and have an already existing subscription, the subscription will not receive updates for
    the newly authenticated user. You would need to re-create the subscription so that it will work with the new user.
</p>

<h3>Be careful with multiple quick changes of different subscribed channels</h3>
<p>The SDK creates a single WebSocket connection for all subscribed channels. Each time a channel is added or
    unsubscribed - the SDK currently creates a completely new connection and terminates the old one. Therefore,
    subscriptions to channels should always be done in conjunction with state management so as not to be unnecessarily
    built up several times by multiple components' life cycles.</p>

<h3>Nested Documents</h3>
<p>Nested Documents will not trigger events related to their parent documents. Meaning, updates to a child document -
    will not trigger an event for the parent document. But it will trigger an event for the child document itself.</p>

<h3>Server-Side?</h3>
<p>We currently are not offering access to realtime with Server SDKs and an API key.</p>