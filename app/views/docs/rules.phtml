<?php
$markdown = new \Parsedown();
$markdown->setSafeMode(true);
?>

<p>Rules are the building blocks of Appwrite Database collections. Using rules and their validators you are able to
    structure your project data and make sure you only get the data in the formats you expect to.</p>

<h2><a href="/docs/rules#ruleOjbect" id="ruleObject">Rule Object</a></h2>

<?php
    $parameters = [
        [
            'name' => 'label',
            'type' => 'string',
            'description' => 'Rule display name.',
            'required' => true,
        ],
        [
            'name' => 'key',
            'type' => 'string',
            'description' => 'Rule name. No special characters and no spaces. Max 32 chars.',
            'required' => true,
        ],
        [
            'name' => 'type',
            'type' => 'string',
            'description' => 'Rule key type. Check the rule type lists below for [available options](/docs/rules#types).',
            'required' => true,
        ],
        [
            'name' => 'default',
            'type' => 'any',
            'description' => 'Default value for this rule type. Make sure that the default value is able to pass validation in order to avoid errors when skipping optional values.',
            'required' => true,
        ],
        [
            'name' => 'required',
            'type' => 'boolean',
            'description' => 'Decide if this rule value is required in order to pass document validation.',
            'required' => true,
        ],
        [
            'name' => 'array',
            'type' => 'boolean',
            'description' => 'Decide if this rule is a primitive or an array of values.',
            'required' => true,
        ],
        [
            'name' => 'list',
            'type' => 'array',
            'description' => 'Array of collections unique ID strings. Used only when rule is of type document.',
            'required' => false,
        ],
    ]
?>

<table class="vertical full margin-bottom-large">
    <thead>
        <tr>
            <td style="width: 140px">Name</td>
            <td style="width: 70px"></td>
            <td style="width: 70px">Type</td>
            <td>Description</td>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($parameters as $key => $parameter):
        $name = (isset($parameter['name'])) ? $parameter['name'] : '';
        $type = (isset($parameter['type'])) ? $parameter['type'] : '';
        $description = (isset($parameter['description'])) ? $parameter['description'] : '';
        $required = (isset($parameter['required'])) ? $parameter['required'] : false;
        ?>
        <tr>
            <td data-title="Name: ">
                <?php echo $this->escape($name); ?>
            </td>
            <td data-title="Required? ">
                <?php if($required): ?>
                <span class="tag red">required</span>
                <?php else: ?>
                <span class="tag">optional</span>
                <?php endif; ?>
            </td>
            <td data-title="Type: "><?php echo $this->escape($type); ?></td>
            <td data-title="<?php echo (!empty($description)) ? 'Description: ' : ''; ?>">
                <?php echo $markdown->text($description); ?></td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>

<h2>
    <a href="/docs/rules#types" id="types">Validation Types</a>
</h2>

<p>Each rule has a validation type. This data types are abstracted to help you get started as quickly as possible.</p>

<table class="vertical full margin-bottom-large">
    <thead>
        <tr>
            <td style="width: 140px">Value</td>
            <td>Description</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td data-title="Name: ">text</td>
            <td data-title="Description: ">Any string value.</td>
        </tr>

        <tr>
            <td data-title="Name: ">numeric</td>
            <td data-title="Description: ">Any integer or float value.</td>
        </tr>

        <tr>
            <td data-title="Name: ">boolean</td>
            <td data-title="Description: ">Any boolean value.</td>
        </tr>

        <tr>
            <td data-title="Name: ">wildcard</td>
            <td data-title="Description: ">Accept any value.</td>
        </tr>

        <tr>
            <td data-title="Name: ">url</td>
            <td data-title="Description: ">Any valid URL.</td>
        </tr>

        <tr>
            <td data-title="Name: ">email</td>
            <td data-title="Description: ">Any valid email address.</td>
        </tr>

        <tr>
            <td data-title="Name: ">ip</td>
            <td data-title="Description: ">Any valid IP v4 or v6 address.</td>
        </tr>

        <tr>
            <td data-title="Name: ">document</td>
            <td data-title="Description: ">Accept a valid child document. When using this type you are also required to
                pass the 'list' parameter with an array of the collections UID values of the document types you want to
                accept.</td>
        </tr>

    </tbody>
</table>


<h2 id="examples"><a href="/docs/rules#examples">Examples</a></h2>

<p>The examples below will show you how you can use the rule objects to define a new Appwrite collection.</p>

<p>The following examples are using the <a href="https://github.com/appwrite/sdk-for-node" target="_blank"
        rel="noopener">Appwrite Node.js SDK</a> but can be applied similarly to any of the other <a
        href="/docs/sdks">Appwrite SDKs</a>.</p>

<h3 id="example-1">Example #1 - Movies Collection</h3>

<p>In this example we are creating a simple movies collection that accepts a name, release year and notes attributes.
    Out notes attribute will only accept an array of text based values and not a single value.</p>

<div class="ide" data-lang="nodejs" data-lang-label="Node.js SDK">
    <pre class="line-numbers"><code class="prism language-javascript" data-prism>const appwrite = require('node-appwrite');
    
const client = new appwrite.Client();
const database = new appwrite.Database(client);

client
    .setEndpoint('YOUR_SERVER_ENDPOINT') // http://localhost/v1
    .setProject('YOUR_PROJECT_UID')
    .setKey('YOUR_API_SECRET')
;

let promise = database.createCollection(
    'Movies', // Collection Name
    ['*'], // Read permissions
    ['user:yyy', 'team:xxx'], // Write permissions
    [ // Rules
      {
        "label": "Name",
        "key": "name",
        "type": "text",
        "default": "Empty Name",
        "required": true,
        "array": false
      },
      {
        "label": "Release Year",
        "key": "releaseYear",
        "type": "numeric",
        "default": 1970,
        "required": true,
        "array": false
      },
      {
        "label": "Notes",
        "key": "notes",
        "type": "text",
        "default": null,
        "required": false,
        "array": true
      }
    ]
);

promise.then(function (response) {
    console.log(response);
}, function (error) {
    console.log(error);
});

</code></pre>
</div>

<p>A valid document for the collection we just created will look like this:</p>

<div class="ide" data-lang="nodejs" data-lang-label="Node.js SDK">
    <pre class="line-numbers"><code class="prism language-javascript" data-prism>let movie = {
	"name": "Frozen 2",
	"releaseYear": 2019,
	"notes": [
		"This movie is awesome!",
		"I really like the post-credits scene."
	]
};
</code></pre>
</div>

<h3 id="example-1">Example #2 - Nested Documents</h3>

<p>In this example, we are creating a simple movies and actors collections. The new movie collection will accept a new
    actors attribute that will include an array of actor type documents.</p>

<div class="ide" data-lang="nodejs" data-lang-label="Node.js SDK">
    <pre class="line-numbers"><code class="prism language-javascript" data-prism>const appwrite = require('node-appwrite');

async function boot() {

  const client = new appwrite.Client();
  const database = new appwrite.Database(client);

  client
      .setEndpoint('YOUR_SERVER_ENDPOINT') // http://localhost/v1
      .setProject('YOUR_PROJECT_UID')
      .setKey('YOUR_API_SECRET')
  ;

  let actorsCollection = await database.createCollection(
      'Actors', // Collection Name
      ['*'], // Read permissions
      ['user:yyy', 'team:xxx'], // Write permissions
      [ // Rules
        {
          "label": "Name",
          "key": "name",
          "type": "text",
          "default": "Empty Name",
          "required": true,
          "array": false
        },
      ]
  );

  let moviesCollection = await database.createCollection(
      'Movies', // Collection Name
      ['*'], // Read permissions
      ['user:yyy', 'team:xxx'], // Write permissions
      [ // Rules
        {
          "label": "Name",
          "key": "name",
          "type": "text",
          "default": "Empty Name",
          "required": true,
          "array": false
        },
        {
          "label": "Release Year",
          "key": "releaseYear",
          "type": "numeric",
          "default": 1970,
          "required": true,
          "array": false
        },
        {
          "label": "Actors",
          "key": "actors",
          "type": "document",
          "default": null,
          "required": false,
          "array": true,
          "list": [actorsCollection['$id']] // Name the collections unique IDs that are allowed in the attribute
        }
      ]
  );

  let response = await database.createDocument(
    moviesCollection['$id'], // Parent collection unique ID
    {
      "name": "Frozen 2",
      "releaseYear": 2019,
      "actors": [
        {
          "$collection": actorsCollection['$id'], // The actors collection unique ID
          "$permissions": {"read": ["*"], "write": ['user:yyy', 'team:xxx']}, // Set document permissions
          "name": "Idina Menzel"
        },
        {
          "$collection": actorsCollection['$id'], // The actors collection unique ID
          "$permissions": {"read": ["*"], "write": ['user:yyy', 'team:xxx']}, // Set document permissions
          "name": "Kristen Bell"
        }
      ]
    },
    ['*'], // Read permissions
  );

  console.log(response);
}

boot();

</code></pre>
</div>

<p>Note that child document must declare both their unique collection ID and permissions settings individually, to help
    the Appwrite API run the correct set of validation rules on your input.</p>