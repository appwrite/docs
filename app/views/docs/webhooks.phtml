<?php

$events = $this->getParam('events', []);

?>
<p>Webhooks allow you to build or set up integrations which subscribe to certain events on Appwrite. When one of those
    events is triggered, we'll send an HTTP POST payload to the webhook's configured URL. Webhooks can be used to purge
    cache from CDN, calculate data or send a Slack notification. You're only limited by your imagination.</p>

<h2><a href="/docs/webhooks#addWebhook" id="addWebhook">Add Your Webhook</a></h2>

<p>You can set your webhook by adding it from your Appwrite project dashboard. You can access your webhooks settings
    from your project dashboard or on the left navigation panel. Click the 'Add Webhook' button and choose your webhook
    name and the events that should trigger it. You can also set an optional basic HTTP authentication username and
    password to protect your endpoint from unauthorized access. </p>

<h2><a href="/docs/webhooks#payload" id="payload">Payload</a></h2>

<p>Each event type has a specific payload format with the relevant event information. All event payloads mirror the
    payloads for the API payload which parallel to the <a href="/docs/webhooks#events">event types</a>.</p>

<h2><a href="/docs/webhooks#headers" id="headers">Headers</a></h2>

<p>HTTP requests made to your webhook's configured URL endpoint will contain several special headers:</p>

<table cellspacing="0" cellpadding="0" border="0" class="full text-size-small">
    <thead>
        <tr>
            <th style="width: 220px">Header</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                X-Appwrite-Webhook-Id
                <p class="margin-top-small text-fade">version >= 0.7</p>
            </td>
            <td>The ID of the Webhook who triggered the event.</td>
        </tr>
        <tr>
            <td>X-Appwrite-Webhook-Event</td>
            <td>Name of the event that triggered this delivery.</td>
        </tr>
        <tr>
            <td>X-Appwrite-Webhook-Name</td>
            <td>Name of the webhook as specified in your app settings and <a href="/docs/webhooks#events">events
                    list</a>.</td>
        </tr>
        <tr>
            <td>
                X-Appwrite-Webhook-User-Id
                <p class="margin-top-small text-fade">version >= 0.7</p>
            </td>
            <td>The user ID of the user who triggered the event. Returns an empty string if an API key triggered the
                event.<br /><br />Note that events like `account.create` or `account.sessions.create` are performed by
                guest users and will not return any user ID. If you still need the user ID for these events, you can
                find it in the event payload.</td>
        </tr>
        <tr>
            <td>
                X-Appwrite-Webhook-Project-Id
                <p class="margin-top-small text-fade">version >= 0.7</p>
            </td>
            <td>The ID of the project who owns the Webhook and API call.</td>
        </tr>
        <tr>
            <td>User-Agent</td>
            <td>Each request made by Appwrite will be 'Appwrite-Server'.</td>
        </tr>
    </tbody>
</table>

<h2 id="events"><a href="/docs/webhooks#events">Events</a></h2>

<p>A list of all currently available events you can hook to:</p>

<table class="full text-size-small vertical">
    <thead>
        <tr>
            <th style="width: 240px;">Name</th>
            <th style="width: 140px;">Payload</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach($events as $event => $data):
        $description = $data['description'] ?? '';
        $model = $data['model'] ?? '';
        $note = $data['note'] ?? '';
    ?>
        <tr>
            <td>
                <?php echo $this->escape($event); ?>
                <?php if(!empty($note)): ?>
                <p class="margin-top-small text-fade"><?php echo $this->escape($note); ?></p>
                <?php endif; ?>
            </td>
            <td>
                <?php if(!empty($model)): ?>
                <a href="/docs/models/<?php echo $this->escape($model); ?>"><?php echo $this->escape(ucfirst($model)); ?>
                    Object</a>
                <?php endif; ?>
            </td>
            <td><?php echo $this->escape($description); ?></td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>