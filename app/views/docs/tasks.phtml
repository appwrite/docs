<p>Appwrite tasks allow you to schedule any repeating tasks your app might need to run in the background. Each appwrite
    task is set by defining a schedule in CRON syntax format and submitting an HTTP endpoint to be executed in a given
    time.</p>

<p>Each task can define any HTTP endpoint with any given HTTP method, headers or basic HTTP authentication. It is
    recommended to password protect your HTTP endpoint to make sure only authorized client can access and execute it.
</p>

<p>Inside your Appwrite console, you can view all your tasks, their current statuses, previous and next runtime and a
    response log to view the result of previous executions.</p>

<h2><a href="/docs/tasks#cron" id="cron">CRON Syntax</a></h2>

<p>Cron format is a simple, yet powerful and flexible way to define the time and frequency of various actions. The
    create a new task, you need to supply Appwrite with a valid CRON syntax.</p>

<p>The Appwrite cron parser can handle increments of ranges (e.g. */12, 2-59/3), intervals (e.g. 0-9), lists (e.g.
    1,2,3), W to find the nearest weekday for a given day of the month, L to find the last day of the month, L to find
    the last given weekday of a month, and hash (#) to find the nth weekday of a given month. <a
        href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="nofollow">Learn more about the CRON syntax</a>.
</p>

<h3>Examples</h3>

<b>Schedule task to execute every 5 minutes</b>

<p class="note margin-top-small">If you want to run your script on 5 minutes interval, configure like below.</p>

<div class="ide margin-top-small">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>*/5 * * * *</code></pre>
</div>

<b>Schedule task to execute at 2am daily</b>

<p class="note margin-top-small">This will be useful for scheduling email reports on daily basis.</p>

<div class="ide margin-top-small">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>0 2 * * *</code></pre>
</div>

<b>Schedule task to execute on every Sunday at 5 PM</b>

<p class="note margin-top-small">This type of cron is useful for doing weekly tasks, like log rotation etc.</p>

<div class="ide margin-top-small">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>0 17 * * sun</code></pre>
</div>

<b>Schedule task to execute on selected days</b>

<p class="note margin-top-small">If you required scheduling a task to be executed for selected days only. Below example
    will run on each Sunday and Friday at 5 PM.</p>

<div class="ide margin-top-small">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>0 17 * * sun,fri</code></pre>
</div>

<h2><a href="/docs/tasks#headers" id="headers">Headers</a></h2>

<p>HTTP payloads that are delivered to your task's configured URL endpoint will contain several special headers:</p>

<table cellspacing="0" cellpadding="0" border="0" class="full text-size-small">
    <thead>
        <tr>
            <th style="width: 200px">Header</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>X-Appwrite-Task-UID</td>
            <td>Unique ID of the task that triggered this delivery.</td>
        </tr>
        <tr>
            <td>X-Appwrite-Task-Name</td>
            <td>Name of the task that triggered this delivery.</td>
        </tr>
        <tr>
            <td>User-Agent</td>
            <td>Each request made by Appwrite will be 'Appwrite-Server'</td>
        </tr>
    </tbody>
</table>

<h2><a href="/docs/tasks#errors" id="errors">Errors</a></h2>

<p>Appwrite tasks server will treat any none 2** status code resulted from a task execution as an error or a failed
    task. The server will attempt to execute the failed tasks for 5 more times before changing tasks status to paused
    and stop future executions.</p>

<p>When a task is paused you should fix the issue resulting on your endpoint and manually change the task status in the
    Appwrite console. You can use the execution logs in the console to debug your server response.</p>