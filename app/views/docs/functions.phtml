<?php

use Appwrite\Utopia\View;

$events = $this->getParam('events', []);
$runtimes = $this->getParam('runtimes', []);

?>

<p>Appwrite Functions allow you to extend and customize your Appwrite server functionality by executing your custom code. Appwrite can execute your custom code in response to any <a href="/docs/webhooks#events" target="_blank">Appwrite system event</a> like account creation, user login, or document update. You can also schedule your functions to run according to a CRON schedule or start them manually by triggering your function from an HTTP endpoint using the Appwrite client or server APIs.</p>

<p>Appwrite Functions run in a secure, isolated Docker container. By default, Appwrite supports multiple runtimes for different languages that you can use to run your code.</p>

<h2><a href="/docs/functions#gettingStarted" id="gettingStarted">Getting Started</a></h2>

<p>The quickest way to get started with Appwrite Functions is using the <a href="/docs/command-line">Appwrite CLI</a>. The CLI comes with starter code and some simple commands to quickly create and deploy your functions. Once you have the CLI installed and setup with an Appwrite project, create your first function using: </p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite init function</code></pre>
</div>

<p>Give your function a name and choose your runtime. This will create a new starter function in the current directory and also add it to your <b>appwrite.json</b> file. Go ahead and deploy your function using :</p>

<div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
    <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite deploy function</code></pre>
</div>

<p>You can now head over to your Appwrite Dashboard, navigate to the Function settings and execute your function. You can find the status of your execution under the <b>Logs</b> tab. </p>

<p>Feel free to modify and play around with the starter code and use the <b>appwrite deploy</b> command to instantly deploy your changes to the Appwrite server. </p>

<p> The following sections will dive deeper into some more terminology and advanced concepts which can be useful when writing your function from scratch.</p>

<h2><a href="/docs/functions#writingYourOwnFunction" id="writingYourOwnFunction">Writing your own Function</a></h2>

<p>When writing your own Appwrite Function, you must export the code in certain ways depending on the language. This varies between languages so refer to the examples below.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Node.js</h3>
        <div>
        <div class="ide margin-top-small" data-lang="javascript" data-lang-label="Javascript">
            <pre class="line-numbers"><code class="prism language-js" data-prism>module.exports = async (req, res) => {
  const payload =
    req.payload ||
    'No payload provided. Add custom data when executing function.';

  const secretKey =
    req.env.SECRET_KEY ||
    'SECRET_KEY environment variable not found. You can set it in Function settings.';

  const randomNumber = Math.random();

  const trigger = req.env.APPWRITE_FUNCTION_TRIGGER;

  res.json({
    message: 'Hello from Appwrite!',
    payload,
    secretKey,
    randomNumber,
    trigger,
  });
};</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>package.json</b> file along with your function, and Appwrite handles the rest! The best practice is to make sure that the <b>node_modules</b> folder is <b>not</b> a part of your tarball.</p>
        </div>
    </li>
    <li>
        <h3>PHP</h3>
        <div>
        <div class="ide margin-top-small" data-lang="php" data-lang-label="PHP">
            <pre class="line-numbers"><code class="prism language-php" data-prism>&lt;?php

return function ($req, $res) {
  $payload =
    $req['payload'] ?:
    'No payload provided. Add custom data when executing function.';

  $secretKey =
    $req['env']['SECRET_KEY'] ?:
    'SECRET_KEY environment variable not found. You can set it in Function settings.';

  $randomNumber = \mt_rand() / \mt_getrandmax();

  $trigger = $req['env']['APPWRITE_FUNCTION_TRIGGER'];

  $res->json([
    'message' => 'Hello from Appwrite!',
    'payload' => $payload,
    'secretKey' => $secretKey,
    'randomNumber' => $randomNumber,
    'trigger' => $trigger,
  ]);
};</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>composer.json</b> file along with your function, make sure to require autoload.php from vendor folder, and Appwrite handles the rest!. The best practice is to make sure that the <b>vendor</b> directory is <b>not</b> a part of your tarball. </p>
    </div>
    </li>
    <li>
        <h3>Python</h3>
        <div>
        <div class="ide margin-top-small" data-lang="python" data-lang-label="Python">
            <pre class="line-numbers"><code class="prism language-python" data-prism>import random

def main(req, res):
  payload = req.payload or 'No payload provided. Add custom data when executing function.'

  secretKey = req.env.get(
    'SECRET_KEY',
    'SECRET_KEY environment variable not found. You can set it in Function settings.'
  )

  randomNumber = random.random()

  trigger = req.env['APPWRITE_FUNCTION_TRIGGER']

  return res.json({
    'message': 'Hello from Appwrite!',
    'payload': payload,
    'secretKey': secretKey,
    'randomNumber': randomNumber,
    'trigger': trigger,
  })</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>requirements.txt</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>Ruby</h3>
        <div>
        <div class="ide margin-top-small" data-lang="ruby" data-lang-label="Ruby">
            <pre class="line-numbers"><code class="prism language-ruby" data-prism>def main(req, res)
  payload =
    !req.payload.empty? ? req.payload :
    'No payload provided. Add custom data when executing function.'

  secretKey =
    req.env['SECRET_KEY'] ||
    'SECRET_KEY environment variable not found. You can set it in Function settings.'

  randomNumber = rand()

  trigger = req.env['APPWRITE_FUNCTION_TRIGGER']

  return res.json({
    :message => 'Hello from Appwrite!',
    :payload => payload,
    :secretKey => secretKey,
    :randomNumber => randomNumber,
    :trigger => trigger,
  })
end</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>Gemfile</b> with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>Deno</h3>
        <div>
        <div class="ide margin-top-small" data-lang="typescript" data-lang-label="Deno">
            <pre class="line-numbers"><code class="prism language-typescript" data-prism>export default async function (req: any, res: any) {
  const payload =
    req.payload ||
    'No payload provided. Add custom data when executing function.';

  const secretKey =
    req.env.SECRET_KEY ||
    'SECRET_KEY environment variable not found. You can set it in Function settings.';

  const randomNumber = Math.random();

  const trigger = req.env.APPWRITE_FUNCTION_TRIGGER;

  res.json({
    message: 'Hello from Appwrite!',
    payload,
    secretKey,
    randomNumber,
    trigger,
  });
};</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>No special steps are required for Deno- Appwrite handles everything!</p>
        </div>
    </li>
    <li>
        <h3>Dart</h3>
        <div>
        <div class="ide margin-top-small" data-lang="dart" data-lang-label="Dart">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'dart:math';
import 'dart:async';

Future &lt;void&gt; start(final req, final res) async {
  final payload =
    !req.payload?.isEmpty ? req.payload :
    'No payload provided. Add custom data when executing function.';

  final secretKey =
    req.env['SECRET_KEY'] ??
    'SECRET_KEY environment variable not found. You can set it in Function settings.';

  final randomNumber = new Random().nextDouble();

  final trigger = req.env['APPWRITE_FUNCTION_TRIGGER'];

  res.json({
    'message': 'Hello from Appwrite!',
    'payload': payload,
    'secretKey': secretKey,
    'randomNumber': randomNumber,
    'trigger': trigger,
  });
}</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>pubspec.yaml</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>Swift</h3>
        <div>
        <div class="ide margin-top-small" data-lang="swift" data-lang-label="Swift">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>func main(req: RequestValue, res: RequestResponse) throws -> RequestResponse {
    let payload = req.payload.isEmpty 
        ? "No payload provided. Add custom data when executing function" 
        : req.payload
    
    let secretKey = req.env["SECRET_KEY"] 
        ?? "SECRET_KEY environment variable not found. You can set it in Function settings."

    let randomNumber = Double.random(in: 0...1)

    let trigger = req.env["APPWRITE_FUNCTION_TRIGGER"]

    return res.json(data: [
        "message": "Hello from Appwrite!",
        "payload": payload,
        "secretKey": secretKey,
        "randomNumber": randomNumber,
        "trigger": trigger,
    ])
}</code></pre>
        </div>
        <p>With Swift, your <b>entrypoint</b> can be empty since Appwrite automatically infers it from the location of your <b>main()</b> function. Just ensure that your cloud function has a <b>single declaration of main()</b> across your source files.</p>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>Package.swift</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>.NET</h3>
        <div>
        <div class="ide margin-top-small" data-lang="csharp" data-lang-label="C#">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>public async Task<RuntimeResponse> Main(RuntimeRequest req, RuntimeResponse res)
{
  var payload = (string.IsNullOrEmpty(req.Payload))
                ? "No payload provided. Add custom data when executing function."
                : req.Payload; 

  var secretKey = req.Env.ContainsKey("SECRET_KEY")
                  ? req.Env["SECRET_KEY"]
                  : "SECRET_KEY environment variable not found. You can set it in Function settings.";

  var randomNumber = new Random().NextDouble();

  var trigger = req.Env["APPWRITE_FUNCTION_TRIGGER"];

  return res.Json(new() 
  {
    { "message", "Hello from Appwrite!" },
    { "payload", payload },
    { "secretKey", secretKey },
    { "randomNumber", randomNumber },
    { "trigger", trigger },
  });
}</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>Function.csproj</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>Kotlin</h3>
        <div>
        <div class="ide margin-top-small" data-lang="kotlin" data-lang-label="Kotlin">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>import kotlin.random.Random

@Throws(Exception::class)
fun main(req: RuntimeRequest, res: RuntimeResponse): RuntimeResponse {

    val payload = if (req.payload.isEmpty()) "No payload provided. Add custom data when executing function." else req.payload

    val secretKey = req.env["SECRET_KEY"] ?: "SECRET_KEY environment variable not found. You can set it in Function settings."
    
    val randomNumber = Random.nextDouble(0.0, 1.0)

    val trigger = req.env["APPWRITE_FUNCTION_TRIGGER"]    

    return res.json(mapOf(
        "message" to "Hello from Appwrite!",
        "payload" to payload,
        "secretKey" to secretKey,
        "randomNumber" to randomNumber,
        "trigger" to trigger
    ))
}</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>deps.gradle</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>Java</h3>
        <div>
        <div class="ide margin-top-small" data-lang="java" data-lang-label="Java">
            <pre class="line-numbers"><code class="prism language-java" data-prism>import java.util.Map;
import java.util.HashMap;

public RuntimeResponse main(RuntimeRequest req, RuntimeResponse res) throws Exception {

    String payload = (req.getPayload().isEmpty())
                     ? "No payload provided. Add custom data when executing function."
                     : req.getPayload();

    Map<String, String> env = req.getEnv();

    String secretKey = env.containsKey("SECRET_KEY")
                       ? env.get("SECRET_KEY")
                       : "SECRET_KEY environment variable not found. You can set it in Function settings.";

    double randomNumber = Math.random();

    String trigger = env.get("APPWRITE_FUNCTION_TRIGGER");

    Map<String, Object> response = new HashMap();
        response.put("message", "Hello from Appwrite!");
        response.put("payload", payload);
        response.put("secretKey", secretKey);
        response.put("randomNumber", randomNumber);
        response.put("trigger", trigger);

    return res.json(response);
}</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>deps.gradle</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
    <li>
        <h3>C++</h3>
        <div>
        <div class="ide margin-top-small" data-lang="cpp" data-lang-label="C++">
            <pre class="line-numbers"><code class="prism language-csharp" data-prism>#include &lt;iostream&gt;
#include &lt;string&gt;

static RuntimeResponse &main(const RuntimeRequest &req, RuntimeResponse &res) {

    std::string payload = req.payload.empty() ? 
                          "No payload provided. Add custom data when executing function." : 
                          req.payload;

    std::string secretKey = req.env.get("SECRET_KEY", "SECRET_KEY environment variable not found. You can set it in Function settings.").asString();

    double randomNumber = ((double) rand() / (RAND_MAX));

    std::string trigger = req.env["APPWRITE_FUNCTION_TRIGGER"].asString();

    Json::Value response;
    response["message"] = "Hello from Appwrite!";
    response["payload"] = payload;
    response["secretKey"] = secretKey;
    response["randomNumber"] = randomNumber;
    response["trigger"] = trigger;
    
    return res.json(response);
}</code></pre>
        </div>
        <p><b>Installing Dependencies</b></p>
        <p>Include a <b>CMakeLists.txt</b> file with your function- Appwrite handles the rest!</p>
        </div>
    </li>
</ul>


<p>When your function is called, you receive two parameters, a <b>request</b> and a <b>response</b> object. The request object contains all data that was sent to the function including environment variables. A schema of the request object can be found below and is the same for all runtimes.</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom text-size-small">
    <thead>
    <tr>
        <th style="width: 140px">Property</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>headers</td>
        <td>An object containing all the request headers.</td>
    </tr>
    <tr>
        <td>payload</td>
        <td>A JSON string containing the data when you <a href="/docs/client/functions#functionsCreateExecution">created the execution.</a></td>
    </tr>
    <tr>
        <td>env</td>
        <td>An object containing all the environment variables. This includes </td>
    </tr>
    </tbody>
</table>

<p>The response object has two functions, <b>send()</b> and <b>json()</b> that can be used to send data back to the client. The types and implementation of these functions vary depending on runtime due to all languages being slightly different. You can check out implementation in the specific languages to learn more about them. The schema of the response object can be found below: </p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom text-size-small">
    <thead>
    <tr>
        <th style="width: 140px">Function</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>send(text, status)</td>
        <td>Function to return a text response. Status code defaults to 200</td>
    </tr>
    <tr>
        <td>json(obj, status)</td>
        <td>Function to return a JSON response. Status code defaults to 200</td>
    </tr>
    </tbody>
</table>

<h2><a href="/docs/functions#createFunction" id="createFunction">Create your Function</a></h2>

<p>Before you can deploy your function, you will need to create a new function from your Appwrite project's dashboard. Access the Function settings from your project's left navigation panel. Click the 'Add Function' button and choose a function name and runtime. In your Functions settings page, you can also set your function event triggers, CRON schedule, and set secure environment variables for your function. </p>

<h2><a href="/docs/functions#deployFunction" id="deployFunction">Deploy Your Function</a></h2>

<p>Once you've written your function, you can now deploy it using the <a href="/docs/command-line">Appwrite CLI</a>, the Appwrite <a href="/docs/getting-started-for-server">Server API</a> or manually from the Appwrite console.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Unix</h3>

        <div class="ide margin-bottom" data-lang="bash" data-lang-label="Bash">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite functions createDeployment \
    --functionId=6012cc93d5a7b \
    --activate=true \
    --entrypoint="index.js" \
    --code="."</code></pre>
        </div>
    </li>
    <li>
        <h3>CMD</h3>

        <div class="ide margin-bottom" data-lang="bash" data-lang-label="CMD">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite functions createDeployment ^
    --functionId=6012cc93d5a7b ^
    --activate=true ^
    --entrypoint="index.js" ^
    --code="."</code></pre>
        </div>
    </li>
    <li>
        <h3>PowerShell</h3>

        <div class="ide margin-bottom" data-lang="bash" data-lang-label="PowerShell">
            <pre class="line-numbers"><code class="prism language-bash" data-prism>appwrite functions createDeployment ,
    --functionId=6012cc93d5a7b ,
    --activate=true ,
    --entrypoint="index.js" ,
    --code="."</code></pre>
        </div>
    </li>
</ul>

<p>The command above accepts three parameters:</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom text-size-small">
    <thead>
    <tr>
        <th style="width: 140px">Name</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>functionId</td>
        <td>The ID of the Function you created in the previous step. You can find your function ID on your function page in your project dashboard.</td>
    </tr>
    <tr>
        <td>entrypoint</td>
        <td>The file name of your custom code that is executed when the function is triggered.</td>
    </tr>
    <tr>
        <td>code</td>
        <td>Path to your function tarball. When used with the Appwrite CLI, simply pass the path to your code directory, and the CLI will automatically package your code. </td>
    </tr>
    </tbody>
</table>

<p><a href="/docs/server/functions#functionsCreateDeployment" rel="noopener"><i class="icon-angle-circled-right margin-start-negative-tiny margin-end-tiny"></i> You can also create new code deployments using the Appwrite server API</a></p>

<h2><a href="/docs/functions#build" id="build">Builds</a></h2>
<p>Deployments needs to be built before they can be activated. This is automatically done after creating a deployment and the time taken can vary depending on the runtime.</p>

<p>If a build fails for any reason, the deployment's status is set to <b>failed</b> and you won't be able to activate it. You can however retry a build if you think it was caused by an external factor using the <b>Retry Button</b> on the Appwrite Dashboard or <a href="/docs/server/functions#functionsRetryBuild">Retry Build</a> endpoint with the <b>buildId</b> from the deployment.</p>

<p>To find more details about a deployment and reasons for its failure, you can use the <a href="/docs/server/functions#functionsGetDeployment">Get Deployment</a> endpoint using the <b>deploymentId</b>.</p>

<p>Deployments that have been built successfully are marked as <b>ready</b> and can be activated and executed.</p>

<div class="notice">
    <h3>Build Times</h3>
    <p>Compiled runtimes such as Rust and Swift take much longer to build however yield better performance over their interpreted counterparts such as Node.</p>
</div>

<h2><a href="/docs/functions#execute" id="execute">Execute</a></h2>

<p>Besides setting a schedule or allowing your function to listen to Appwrite’s system events, you can also manually execute your cloud functions from your Appwrite console or API.</p>

<?php
$image = new View(__DIR__.'/../general/image.phtml');
    echo $image
        ->setParam('srcLight', '/images-ee/docs/functions-light.png')
        ->setParam('srcDark', '/images-ee/docs/functions-dark.png')
        ->setParam('alt', 'Function settings page.')
        ->setParam('description', 'Function settings page.')
        ->render();
?>

<p>To execute a function from the Appwrite console, click the 'Execute Now' button on your function's overview page. To execute a function from the API, send a POST request to the <a href="/docs/client/functions#functionsCreateExecution" target="_blank">function execution endpoint</a>.</p>

<p>The function execution endpoint is available from both Appwrite client and server APIs. To execute your function from the <b>server API</b>, you need an API key with 'execution.write' scope.</p>

<p>Executing the function from the <b>client API</b> requires the current user to have execution permission for the function. You can change the execution permission from the function's settings page in the Appwrite console, by default no user, team, or role has this permission.</p>

<ul class="phases clear" data-ui-phases>
    <li>
        <h3>Web</h3>
        <div class="ide margin-bottom" data-lang="javascript" data-lang-label="Web SDK">
            <pre class="line-numbers"><code class="prism language-javascript" data-prism>import { Client, Functions } from "appwrite";

const client = new Client();

client
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1')
    .setProject('[PROJECT_ID]');

const databases = new Databases(client, '[DATABASE_ID]');

let promise = functions.createExecution('[FUNCTION_ID]');

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});</code></pre>
        </div>
    </li>
    <li>
        <h3>Flutter</h3>

        <div class="ide margin-bottom" data-lang="dart" data-lang-label="Flutter SDK">
            <pre class="line-numbers"><code class="prism language-dart" data-prism>import 'package:appwrite/appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Functions functions = Functions(client);

  client
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
  ;

  Future result = functions.createExecution(
    functionId: '[FUNCTION_ID]',
  );

  result
    .then((response) {
      print(response);
    }).catchError((error) {
      print(error.response);
  });
}</code></pre>
        </div>
    </li>
    <li>
        <h3>iOS</h3>

        <div class="ide margin-bottom" data-lang="swift" data-lang-label="Apple SDK">
            <pre class="line-numbers"><code class="prism language-swift" data-prism>import Appwrite

func main() {
    let client = Client()
      .setEndpoint("https://[HOSTNAME_OR_IP]/v1") // Your API Endpoint
      .setProject("5df5acd0d48c2") // Your project ID

    let functions = Functions(client)
    let execution = functions.createExecution(
        functionId: "[FUNCTION_ID]"
    )
    print(execution.toMap())
}</code></pre>
        </div>
    </li>
    <li>
        <h3>Android</h3>

        <div class="ide margin-bottom" data-lang="kotlin" data-lang-label="Android SDK">
            <pre class="line-numbers"><code class="prism language-kotlin" data-prism>import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import io.appwrite.Client
import io.appwrite.services.Functions

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val client = Client(applicationContext)
            .setEndpoint("https://[HOSTNAME_OR_IP]/v1") // Your API Endpoint
            .setProject("5df5acd0d48c2") // Your project ID

        val functions = Functions(client)

        GlobalScope.launch {
            val response = functions.createExecution(
                functionId = "[FUNCTION_ID]",
            )
            val json = response.body?.string()        
        }
    }
}</code></pre>
        </div>
    </li>
</ul>


<h3><a href="/docs/functions#abuseLimits" id="abuseLimits">Abuse and Limits</a></h3>

<p>Appwrite Functions can be executed using Client or Server SDKs. Client SDKs must be authenticated with an account that has been granted execution <a href="/docs/permissions">permissions</a> on the function's settings page. Server SDKs require an API key with the correct scopes.</p>

<p>The Functions Service APIs are rate limited to 60 calls per minute per account when using a Client SDK. Learn more about <a href="docs/rate-limits">rate limiting</a>. The response size of a Cloud Function is limited to 1MB. Responses larger than 1MB should be handled using Appwrite's Databases or Storage service.</p>

<p>Each execution has a default timeout of 15 seconds to prevent hanging functions from blocking resources. This timeout can be configured per function on a function's settings page or in <span class="tag">appwrite.json</span> for up to 900 seconds.</p>

<p>The maximum configurable timeout can be increased by changing the <span class="tag">_APP_FUNCTIONS_TIMEOUT</span> environment variable. This environment variable changes the configurable maximum but does not alter existing individual configurations.</p>

<h2><a href="/docs/functions#ignoreFiles" id="ignoreFiles">Ignore Files</a></h2>

<p>Library folders such as <b>node_modules</b> or <b>vendor</b> should not be included in your tarball since these dependencies will be installed during your function's build process. Similarly, you should <b>not</b> include files containing secrets in your deployment. You can use the Appwite CLI's <b>file ignoring</b> feature to exclude specific files from a deployment.</p>

<p>You can use the <b>ignore</b> property in your <b>appwrite.json</b> file to specify which files and folders should be ignored. This value must be an array of paths, as seen in the example below:</p>

<div class="ide margin-bottom" data-lang="json" data-lang-label="JSON">
    <pre class="line-numbers"><code class="prism language-json" data-prism>{
    ...
    "functions": [
        {
            "$id": "6213b58cb21dda6c3263",
            "name": "My Awesome Function",
            "runtime": "node-17.0",
            "path": "My Awesome Function",
            "entrypoint": "src/index.js",
            "ignore": [ "node_modules", ".env" ]
        },
        ...
    ],
}</code></pre>
</div>

<p>The example configuration above would not deploy the folder <b>node_modules</b> and the file <b>.env</b>.</p>

<p>Alternatively, you can add a <b>.gitignore</b> file into your function folder and Appwrite CLI will ignore files specified in there. Keep in mind that if present, the <b>ignore</b> configuration in <b>appwrite.json</b> will nullify the <b>.gitignore</b> file configuration.</p>

<p>If you need to use a <b>.gitignore</b> file for your version control but don't want the Appwrite CLI to use it, you can specify the <b>ignore</b> key in <b>appwrite.json</b> to be an empty array.</p>

<h2><a href="/docs/functions#supportedRuntimes" id="supportedRuntimes">Supported Runtimes</a></h2>

<p>Appwrite provides multiple code runtimes to execute your custom functions. Each runtime uses a Docker image tied to a specific language version to provide a safe, isolated playground to run your team's code.</p>

<p>Below is a list of supported Cloud Functions runtimes. The Appwrite team continually adds support for new runtimes.</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 50px"></th>
            <th style="width: 120px">Name</th>
            <th>Image</th>
            <th>Architectures</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach($runtimes as $key => $runtime): ?>
        <tr>
            <td><img src="" data-ls-attrs="src=/images/runtimes/<?php echo $this->escape($runtime['logo'] ?? ''); ?>" alt="Function Env." class="avatar xxs" /></td>
            <td><span data-general-copy><?php echo $this->escape($key); ?> </span></td>
            <td><a href="https://hub.docker.com/r/<?php echo $this->escape(strtok($runtime['image'], ':')); ?>" target="_blank" rel="noopener"><?php echo $this->escape($runtime['image'] ?? ''); ?> <i class="icon-link-ext"></i></a></td>
            <td><?php echo $this->escape(implode(' / ', $runtime['supports'] ?? [])); ?></td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>

<p>By default, the following runtimes are enabled: "node-16.0, php-8.0, python-3.9, ruby-3.0". To enable or disable runtimes, you can edit the <span class="tag">_APP_FUNCTIONS_RUNTIMES</span> <a href="/docs/functions#environmentVariables">environment variable</a>.</p>

<h2><a href="/docs/functions#environmentVariables" id="environmentVariables">Environment Variables</a></h2>

<p>Environment variables supplied by Appwrite in addition to your own defined environment variables that you can access from your function code. These variables give you information about your execution runtime environment.</p>

<table cellspacing="0" cellpadding="0" border="0" class="full margin-bottom-large">
    <thead>
        <tr>
            <th style="width: 250px">Name</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                APPWRITE_FUNCTION_ID
            </td>
            <td>Your function's unique ID.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_NAME
            </td>
            <td>Your function's name.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_DEPLOYMENT
            </td>
            <td>Your function's code deployment unique ID.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_TRIGGER
            </td>
            <td>Either 'event' when triggered by one of the selected scopes, 'http' when triggered by an HTTP request or the Appwrite Console, or 'schedule' when triggered by the cron schedule.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_RUNTIME_NAME
            </td>
            <td>Your function runtime name. Can be any of Appwrite supported execution runtimes.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_RUNTIME_VERSION
            </td>
            <td>Your function runtime version.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_EVENT
            </td>
            <td>Your function event name. This value is available only when your function trigger is 'event.' This variable value can be any of Appwrite <a href="/docs/webhooks#events">system events</a>.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_EVENT_DATA
            </td>
            <td>Your function event payload. This value is available only when your function trigger is 'event'. This variable value contains a string in JSON format with your specific event data.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_DATA
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>Your function's custom execution data. This variable's value contains a string in any format. If the custom data is in JSON FORMAT, it must be parsed inside the function code. Note that this variable can be set only when triggering a function using the <a href="https://appwrite.io/docs/client/functions?sdk=web#functionsCreateExecution">SDK or HTTP API</a> and the Appwrite Dashboard.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_PROJECT_ID
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>Your function's project ID.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_USER_ID
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>The userId of the user that triggered your function's execution. Executions triggered in the Appwrite console will be prepended with "admin-".</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_JWT
                <p class="margin-top-small text-fade">version >= 0.8.0</p>
            </td>
            <td>A <a href="https://jwt.io/">JSON Web Token</a> generated for the user that executes your function.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_EVENT_PAYLOAD
                <p class="margin-top-small text-fade">version &lt; 0.8.0 <span class="text-danger">(deprecated)</span></p>
            </td>
            <td>Your function event payload. Deprecated in favor of APPWRITE_FUNCTION_EVENT_DATA in version 0.8.0.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_ENV_NAME
                <p class="margin-top-small text-fade">version &lt; 0.8.0 <span class="text-danger">(deprecated)</span></p>
            </td>
            <td>Your function environment name. Can be any of Appwrite supported execution environments.</td>
        </tr>
        <tr>
            <td>
                APPWRITE_FUNCTION_ENV_VERSION
                <p class="margin-top-small text-fade">version &lt; 0.8.0 <span class="text-danger">(deprecated)</span></p>
            </td>
            <td>Your function environment version.</td>
        </tr>
    </tbody>
</table>

<div class="notice">
    <h3>Using an Appwrite SDK in Your Function</h3>
    <p>Appwrite Server SDKs require an API key, an endpoint, and a project ID for authentication. Appwrite passes in your project ID with the environment variable  <span class="tag">APPWRITE_FUNCTION_PROJECT_ID</span>, but not the endpoint and API key. If you need to use a Server SDK, you will need to add environment variables for your endpoint and API key in the 'Settings' tab of your function.</p>
    <p>If you are running a <b>local Appwrite instance</b>, you will need to pass in the machine's public IP instead of <span class="tag">'https://localhost/v1'</span>. Localhost inside the function's runtime container is not the same as localhost of your machine.</p>
</div>

<h2><a href="/docs/functions#appwriteSDKInFunctions" id="appwriteSDKInFunctions">Appwrite SDKs in Functions</a></h2>

<p>You can integrate Appwrite Functions with other Appwrite services by using the appropriate <a href="/docs/getting-started-for-server" target="_blank">Server SDK</a> for your runtime. You can find starter code for your function's runtime in the <a href="https://github.com/appwrite/functions-starter" target="_blank">Appwrite Function Starter repository</a>.</p>

<p>To initialize a Server SDK in a function, you need to provide your Appwrite project's endpoint and an <a href="/docs/keys" target="_blank">API key</a> as variables in the <b>Settings</b> tab of your Function. The ID of your Appwrite project is passed in automatically as <span class="tag">APPWRITE_FUNCTION_PROJECT_ID</span>.</p>

<h2><a href="/docs/functions#monitorDebug" id="monitorDebug">Monitor & Debug</a></h2>

<p>You can monitor your function execution usage stats and logs from your Appwrite console. To access your functions usage stats and logs, click the 'Usage' tab in your function dashboard.</p>

<p>The usage screen in your console will allow you to track the number of execution and your function CPU usage time. You can also review a detailed log of your function execution history, including the function exit code, output log, and error log.</p>

<?php
$image = new View(__DIR__.'/../general/image.phtml');
    echo $image
        ->setParam('srcLight', '/images-ee/docs/functions-monitor-light.png')
        ->setParam('srcDark', '/images-ee/docs/functions-monitor-dark.png')
        ->setParam('alt', 'Function usage and logs tracking.')
        ->setParam('description', 'Function usage and logs tracking.')
        ->render();
?>

<h2><a href="/docs/functions#demosExamples" id="demosExamples">Demos & Examples</a></h2>

<p>There are many Cloud Function demos and examples created by the Appwrite team and community in multiple coding languages. These examples are available at our <a href="https://github.com/open-runtimes/examples" target="_blank" rel="noopener">examples repository</a> on GitHub. You can also submit your examples by submitting a <a href="https://github.com/open-runtimes/examples/pulls" target="_blank" rel="noopener">pull-request</a>.</p>
